include "defs.mbr";

% PVS: cp1 = new ConstraintPreferences("cp1") {
%   soft-constraint more_reactive_aggression: 'forall(t in Time) (mean_reactive_aggression[t] >= mean_proactive_aggression[t])';
%   soft-constraint more_starvation_than_murder: 'forall(t in Time) (starvation_rate[t] >= murder_rate[t])';
%   soft-constraint more_age_death_than_murder: 'forall(t in Time) (age_death_rate[t] >= murder_rate[t])';
% %   soft-constraint more_int_than_strength: 'forall(t in Time) (mean_intelligence[t] >= mean_strength[t])';
% %   soft-constraint not_very_high_collab: 'forall(t in Time) (collaboration_bonus[t] <= 3)';
% %   soft-constraint not_very_low_max_age: 'forall(t in Time) (max_age[t] >= 200)';

% %   crEdges : '[| mbr.not_very_low_max_age, mbr.not_very_high_collab | mbr.more_starvation_than_murder, mbr.more_reactive_aggression | mbr.more_age_death_than_murder, mbr.more_reactive_aggression |]';
%     crEdges : '[| mbr.more_starvation_than_murder, mbr.more_reactive_aggression | mbr.more_age_death_than_murder, mbr.more_reactive_aggression |]';
%   useSPD: 'false' ; % <- ????
% };

%     parametersOutTraits = ["mean_strength", "mean_speed", "mean_intelligence"]
%     parametersOutDeaths = ["murder_rate", "age_death_rate", "starvation_rate"]
%     parametersOutAggression = ["mean_reactive_aggression", "mean_proactive_aggression"]

PVS: wght = new WeightedCsp("wght") {
  soft-constraint sc_mean_strength: 'low_ratio_harsh(mean_strength, mean_strength_th)' :: weights('mean_strength_w');
  soft-constraint sc_mean_speed: 'low_ratio_harsh(mean_speed, mean_speed_th)' :: weights('mean_speed_w');
  soft-constraint sc_mean_intelligence: 'high_ratio_harsh(mean_intelligence, mean_intelligence_th)' :: weights('mean_intelligence_w');
  soft-constraint sc_murder_rate: 'low_ratio_harsh(murder_rate, murder_rate_th)' :: weights('murder_rate_w');
  soft-constraint sc_age_death_rate: 'high_ratio_harsh(age_death_rate, age_death_rate_th)' :: weights('age_death_rate_w');
  soft-constraint sc_starvation_rate: 'high_ratio_harsh(starvation_rate, starvation_rate_th)' :: weights('starvation_rate_w');
  soft-constraint sc_mean_reactive_aggression: 'high_ratio_harsh(mean_reactive_aggression, mean_reactive_aggression_th)' :: weights('mean_reactive_aggression_w');
  soft-constraint sc_mean_proactive_aggression: 'low_ratio_harsh(mean_proactive_aggression, mean_proactive_aggression_th)' :: weights('mean_proactive_aggression_w');
  soft-constraint sc_average_population: 'high_ratio_harsh(average_population, average_population_th)' :: weights('average_population_w');
};


% solve ToWeighted(cp1);
solve wght;

output '
["\(collaboration_bonus[1]), \(max_age[1]), "] ++
["\(mean_strength[1]), \(mean_speed[1]), \(mean_intelligence[1]), "] ++
["\(murder_rate[1]), \(age_death_rate[1]), \(starvation_rate[1]), "] ++
["\(mean_reactive_aggression[1]), \(mean_proactive_aggression[1]), "] ++
["\(average_population[1])"]
';