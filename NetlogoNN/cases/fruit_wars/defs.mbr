% ========================================
% PVS Types
% ========================================
type FreePVS = PVSType<mset[maxOccurrences] of 1..maxP> = 
  params { 
    array[int, 1..2] of 1..maxP: partialOrdering  :: wrappedBy('java', 'isse.mbr.extensions.preprocessing.TransitiveClosure');
    int: maxP;
    int: maxPerSc;
    int: maxOccurrences :: default('mbr.nScs * mbr.maxPerSc');
  } in 
  instantiates with "soft_constraints/mbr_types/free-pvs-type.mzn" {
    times -> multiset_union;
    is_worse -> isSmythWorse;
    top -> [0 | i in 1..mbr.maxP];
};

type ConstraintPreferences = PVSType<bool, set of 1..nScs> = 
  params { 
    array[int, 1..2] of 1..nScs: crEdges :: wrappedBy('java', 'isse.mbr.extensions.preprocessing.TransitiveClosure');
    bool: useSPD :: default('true');
  } in 
  instantiates with "soft_constraints/mbr_types/cr_type.mzn" {
    times -> union_violateds;
    is_worse -> is_worse_constraint_pref;
    top -> {};
  }
  offers {
    heuristics -> getSearchHeuristicCR;
  };
          
    
type CostFunctionNetwork = PVSType<0..k> = 
  params {
    int: k :: default('1000'); 
  } in  
  instantiates with "soft_constraints/mbr_types/cfn_type.mzn" {
    times -> sum;
    is_worse -> is_worse_weighted; 
    top -> 0;
 };

type MaxCostFunctionNetwork = PVSType<0..k> = 
  params {
    int: k :: default('1000'); 
  } in  
  instantiates with "soft_constraints/mbr_types/cfn_type.mzn" {
    times -> sum;
    is_worse -> is_greater_weighted; 
    top -> 0;
 };
  
type MultiWeightedCsp = PVSType<bool, array[1..d] of 0..k> = 
  params {
    int:  k :: default('1000'); 
    int:  d :: default('1');
    array[1..nScs,1..d] of int: weights :: default('1');
  } in  
  instantiates with "soft_constraints/mbr_types/weighted_type.mzn" {
    times -> weighted_multi_sum;
    is_worse -> is_worse_multi_weighted;
    top -> 0; % [0 | i in 1..d]
 };
 
type WeightedCsp = PVSType<bool, int> = 
  params {
    int: k :: default('1000'); 
    array[1..nScs] of int: weights :: default('1');
  } in  
  instantiates with "soft_constraints/mbr_types/weighted_type.mzn" {
    times -> weighted_sum;
    is_worse -> is_worse_weighted;
    top -> 0;
 }
 offers {
    heuristics -> getSearchHeuristicWeighted;
 };
  
type MaxCsp = PVSType<bool, int> = 
  params {
    int: k :: default('1000'); 
  } in  
  instantiates with "soft_constraints/mbr_types/weighted_type.mzn" {
    times -> bool_sum;
    is_worse -> is_worse_max;
    top -> 0;
 }
 offers {
    heuristics -> getSearchHeuristicMax;
 };
 
type FuzzyConstraints = PVSType<0.0 .. 1.0> = 
  instantiates with "soft_constraints/mbr_types/fuzzy_type.mzn" {
    times -> min;
    is_worse -> is_worse_fuzzy;
    top -> 1.0;
};

type ProbabilisticConstraints = PVSType<bool, 0.0 .. 1.0> = 
  params {
    array[1..nScs] of float: probs :: default('1.0');
  } in  
  instantiates with "soft_constraints/mbr_types/probabilistic_type.mzn" {
    times -> prod;
    is_worse -> is_worse_prob;
    top -> 1.0;
};    
    
type ProbCostFunctionNetwork = PVSType<float> = 
  params {
    array[1..nScs] of float: probs :: default('1.0');
  } in  
  instantiates with "soft_constraints/mbr_types/probabilistic_type.mzn" {
    times -> prob_weighted_sum;
    is_worse -> is_worse_prob_cost; 
    top -> k;
 };

% very useful for approval voting, we give a soft acceptance or not
% similar to weighted CSP, we can have parameter defining whether 
% to conjunctively or disjunctively combine soft constraint gradings
type BooleanPvs = PVSType<bool> = 
  params { 
    bool: conjunction :: default('true');
  } in  
  instantiates with "soft_constraints/mbr_types/bool-type.mzn" {
    times -> combine_boolean;
    is_worse -> is_worse_boolean; 
    top -> true; 
 };
   
% just a simple explicit relation mostly for voting experiments  
type PvsRel = PVSType<1..k> = 
  params {
    int: k :: default('1000'); % just some upper bound on integer values 
    int: topVal :: default('1');
    array [int,1..2] of 1..k: tuples;
  } in  
  instantiates with "soft_constraints/mbr_types/relation-type.mzn" {
    times -> max;
    is_worse -> is_worse_relation; 
    top -> mbr.topVal;
 };

% Similar to PvsRel but with an explicit approval set  
type PvsApprov = PVSType<bool> = 
  params {
    int: k :: default('1000'); % just some upper bound on integer values 
    set of 1..k: approvedSet;
  } in  
  instantiates with "soft_constraints/mbr_types/relation-type.mzn" {
    times -> and;
    is_worse -> is_worse_boolean; 
    top -> true; 
 };
% ========================================
% MORPHISMS
% ========================================
  
morph ConstraintPreferences -> WeightedCsp: ToWeighted = 
  params {
    k = 'mbr.nScs * max(i in 1..mbr.nScs) (mbr.weights[i]) ';
    weights = calculate_cr_weights;
  } in id; % the "in" values denotes the function that is applied to each soft constraint (here just identity)

morph ConstraintPreferences -> WeightedCsp: ToWeightedExt = 
  params generatedBy('isse.mbr.extensions.weighting.SingleWeighting') {
%    k = 'mbr.nScs * max(i in 1..mbr.nScs) (mbr.weights[i]) ';
    k = generated ;
    weights = generated ;
  } in id; % the "in" values denotes the function that is applied to each soft constraint (here just identity)
      

morph ConstraintPreferences -> MultiWeightedCsp: ToMultiWeighted = 
  params generatedBy('isse.mbr.extensions.weighting.MultiWeighting') {
    k = 'mbr.nScs * max(i in 1..mbr.nScs, j in 1..mbr.d) (mbr.weights[i,j]) ';
    d = generated;
    weights = generated ;
  } in id; % the "in" values denotes the function that is applied to each soft constraint (here just identity)
   
% a morphism converting a probabilistic CSP to weighted CSP using log
morph ProbabilisticConstraints -> WeightedCsp: ProbToWeighted = 
  params generatedBy('isse.mbr.extensions.weighting.ProbWeighting') {
    k = 'mbr.nScs * max(i in 1..mbr.nScs) (mbr.weights[i]) ';
    weights = generated ;
  } in id; % the "in" values denotes the function that is applied to each soft constraint (here just identity)
      

